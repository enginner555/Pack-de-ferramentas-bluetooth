# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NLMaP', [dirname(__file__)])
        except ImportError:
            import _NLMaP
            return _NLMaP
        if fp is not None:
            try:
                _mod = imp.load_module('_NLMaP', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _NLMaP = swig_import_helper()
    del swig_import_helper
else:
    import _NLMaP
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NLMaP.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _NLMaP.SwigPyIterator_value(self)
    def incr(self, n = 1): return _NLMaP.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _NLMaP.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _NLMaP.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _NLMaP.SwigPyIterator_equal(self, *args)
    def copy(self): return _NLMaP.SwigPyIterator_copy(self)
    def next(self): return _NLMaP.SwigPyIterator_next(self)
    def __next__(self): return _NLMaP.SwigPyIterator___next__(self)
    def previous(self): return _NLMaP.SwigPyIterator_previous(self)
    def advance(self, *args): return _NLMaP.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _NLMaP.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _NLMaP.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _NLMaP.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _NLMaP.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _NLMaP.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _NLMaP.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _NLMaP.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NLMaP.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NLMaP.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _NLMaP.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _NLMaP.floatArray___setitem__(self, *args)
    def cast(self): return _NLMaP.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _NLMaP.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_NLMaP.floatArray_frompointer)
floatArray_swigregister = _NLMaP.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _NLMaP.floatArray_frompointer(*args)
floatArray_frompointer = _NLMaP.floatArray_frompointer

class XYZData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NLMaP.XYZData_x_set
    __swig_getmethods__["x"] = _NLMaP.XYZData_x_get
    if _newclass:x = _swig_property(_NLMaP.XYZData_x_get, _NLMaP.XYZData_x_set)
    __swig_setmethods__["y"] = _NLMaP.XYZData_y_set
    __swig_getmethods__["y"] = _NLMaP.XYZData_y_get
    if _newclass:y = _swig_property(_NLMaP.XYZData_y_get, _NLMaP.XYZData_y_set)
    __swig_setmethods__["z"] = _NLMaP.XYZData_z_set
    __swig_getmethods__["z"] = _NLMaP.XYZData_z_get
    if _newclass:z = _swig_property(_NLMaP.XYZData_z_get, _NLMaP.XYZData_z_set)
    __swig_setmethods__["sigma"] = _NLMaP.XYZData_sigma_set
    __swig_getmethods__["sigma"] = _NLMaP.XYZData_sigma_get
    if _newclass:sigma = _swig_property(_NLMaP.XYZData_sigma_get, _NLMaP.XYZData_sigma_set)
    def __init__(self): 
        this = _NLMaP.new_XYZData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NLMaP.delete_XYZData
    __del__ = lambda self : None;
XYZData_swigregister = _NLMaP.XYZData_swigregister
XYZData_swigregister(XYZData)

class MultiLateration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiLateration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiLateration, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NLMaP.new_MultiLateration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NLMaP.delete_MultiLateration
    __del__ = lambda self : None;
    def GetPosition(self, *args): return _NLMaP.MultiLateration_GetPosition(self, *args)
MultiLateration_swigregister = _NLMaP.MultiLateration_swigregister
MultiLateration_swigregister(MultiLateration)



